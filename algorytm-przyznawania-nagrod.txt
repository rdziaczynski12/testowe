public double[] sumPrize(long idEvent){
        double prize[] = new double[3];
        prize[0]=0.0;
        prize[1]=0.0;
        prize[2]=0.0;
        if(!betRepository.findById(idEvent).equals(Optional.empty()))
        {
            Bet sum[] = betRepository.allPrize(idEvent);
            for (Bet bet:sum) {
                prize[0]= prize[0] + bet.getAmount();
                if(bet.getBetResult()==true) {
                    prize[1]= prize[1] + bet.getAmount();
                    if(bet.isGeneral()==false)
                        prize[2]= prize[2] + bet.getAmount();
                }
            }
        }
        return prize;
    }

    public double calPrize(long idEvent){
        double bonusPrize;
        double withoutBonusPrize;
        double sumPrize[] = sumPrize(idEvent);
        if(sumPrize[0]>0.0) {
            if(sumPrize[1]>0) {
                Bet generalBet[] = betRepository.getAllIsGeneral(idEvent);
                Bet notGeneralBet[] = betRepository.getAllIsNotGeneral(idEvent);
                if(sumPrize[2]>0.0) {
                    if(sumPrize[1]-sumPrize[2]>0.0) {
                        withoutBonusPrize = (sumPrize[0] - sumPrize[1]) * 0.3;
                        bonusPrize = (sumPrize[0] - sumPrize[1]) * 0.7;
                    }
                    else{
                        withoutBonusPrize = 0.0;
                        bonusPrize = (sumPrize[0] - sumPrize[1]);
                    }
                }
                else{
                    withoutBonusPrize = (sumPrize[0] - sumPrize[1]);
                    bonusPrize = 0.0;
                }
                for (Bet bet : generalBet) {
                    bet.setPrize(
                            bet.getAmount() + (float) (withoutBonusPrize * bet.getAmount() / (sumPrize[1] - sumPrize[2]))
                    );
                    betRepository.saveAndFlush(bet);
                }

                for (Bet bet : notGeneralBet) {
                    bet.setPrize(
                            bet.getAmount() + (float) (bonusPrize * bet.getAmount() / sumPrize[2])
                    );
                    betRepository.saveAndFlush(bet);
                }
            }
            else{
                Bet allEventBet[] = betRepository.getAllByEvent(idEvent);
                for (Bet bet : allEventBet) {
                    bet.setPrize(
                            bet.getAmount()
                    );
                    betRepository.saveAndFlush(bet);
                }
            }
        }
        return sumPrize[0]-sumPrize[1];
    }





SQL

INSERT INTO EVENT (ID_EVENT, ACTIVE, BEGIN_DATE, END_DATE, NAME, ID_TYPE) VALUES (1, TRUE, TO_DATE('2018-05-12','YYYY-MM-DD'), TO_DATE('2018-06-19','YYYY-MM-DD'), 'Real-Barca', 1);
INSERT INTO EVENT (ID_EVENT, ACTIVE, BEGIN_DATE, END_DATE, NAME, ID_TYPE) VALUES (2, FALSE, TO_DATE('2018-08-09','YYYY-MM-DD'), TO_DATE('2018-09-01','YYYY-MM-DD'), 'PSG-Juventus', 1);
INSERT INTO EVENT (ID_EVENT, ACTIVE, BEGIN_DATE, END_DATE, NAME, ID_TYPE) VALUES (3, TRUE, TO_DATE('2018-04-09','YYYY-MM-DD'), TO_DATE('2018-10-01','YYYY-MM-DD'), 'Turniej czterech skoczni', 2);
INSERT INTO EVENT (ID_EVENT, ACTIVE, BEGIN_DATE, END_DATE, NAME, ID_TYPE) VALUES (4, TRUE, TO_DATE('2018-04-09','YYYY-MM-DD'), TO_DATE('2018-10-01','YYYY-MM-DD'), 'Turniej czterech skoczni', 2);

INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(1, 100, TRUE, null, 'Real', TRUE, 1, 1);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(2, 200, TRUE, null, 'Real', TRUE, 1, 3);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(3, 140, FALSE, null, '2-3', FALSE, 1, 2);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(4, 50, TRUE, null, '2-1', FALSE, 1, 2);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(5, 400, FALSE, null, 'Real', TRUE, 1, 3);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(6, 90, TRUE, null, '2-1', FALSE, 1, 4);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(7, 100, FALSE, null, 'Real', TRUE, 1, 3);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(8, 200, TRUE, null, 'Real', TRUE, 1, 4);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(9, 70, TRUE, null, 'Real', TRUE, 1, 2);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(10, 90, TRUE, null, '2-1', FALSE, 2, 4);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(11, 100, FALSE, null, 'Real', TRUE, 2, 3);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(12, 200, FALSE , null, 'Real', TRUE, 2, 4);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(13, 70, FALSE , null, 'Real', TRUE, 2, 2);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(14, 90, FALSE , null, '2-1', FALSE, 3, 4);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(15, 100, TRUE , null, 'Real', TRUE, 3, 3);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(16, 200, FALSE , null, 'Real', TRUE, 3, 4);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(17, 70, FALSE , null, 'Real', TRUE, 4, 2);
INSERT INTO BET (ID_BET, AMOUNT, BET_RESULT, PRIZE, RESULT, IS_GENERAL, ID_EVENT, ID_USER) VALUES(18, 90, FALSE , null, '2-1', FALSE, 4, 4);


Repository


    @Query("SELECT b FROM Bet b JOIN b.event e WHERE e.id = :eventId AND b.isGeneral = TRUE AND b.betResult = TRUE")
    Bet[] getAllIsGeneral(@Param("eventId")Long eventId);

    @Query("SELECT b FROM Bet b JOIN b.event e WHERE e.id = :eventId AND b.isGeneral = FALSE AND b.betResult = TRUE")
    Bet[] getAllIsNotGeneral(@Param("eventId")Long eventId);

    @Query("SELECT b FROM Bet b JOIN b.event e WHERE e.id = :eventId")
    Bet[] getAllByEvent(@Param("eventId")Long eventId);


Controller


@GetMapping("/prize")
    public double calPrize(){//(@PathVariable(name="id")Long id){
        long id = 1;
        return betService.calPrize(id);
    }